// Works in openSCAD 2015.03+ || Last updated Nov 14, 2016


// ##################################################
// GLOBALS
// ##################################################


//all units are in mm.
//for inches: <amount in inches> / I
I = 25.4;

NUMBER_BLADES   = 2;
PITCH_ANGLE     = 5;
BLADE_LEN       = 100;
PROP_DIAMETER   = 120;   // whole thing
SHAFT_DIAMETER  = 1.5;
BLADE_WIDTH     = 20;

//DEPRECATED
BLADE_THICKNESS = 4;

// No touchie.
BLADE_LENGTH    = PROP_DIAMETER/2; 
// ^ this is too much, but they get clipped off, so it's fine.
HUB_DIAMETER    = BLADE_WIDTH/1.5;
HUB_THICKNESS   = sqrt(pow(BLADE_WIDTH,2) + pow(BLADE_THICKNESS,2));
DELTA           = 0.01;
$fn=200;

// ##################################################
// PROTOTYPES
// ##################################################


module blade();
module hub();
module main();
module prop();

//DEPRECATED
module DEP_blade();
	
	
// ##################################################
// DO THINGS
// ##################################################
include <blade_hub.scad>

rotate([0,0,-15]) prop();


// ##################################################
// FUNCTIONS
// ##################################################


module blade(){
	translate([0,0,0])
		rotate([-90,0,90])
			scale([BLADE_WIDTH,BLADE_WIDTH,1])
				linear_extrude(BLADE_LEN)
					polygon( // mmm, justified arrays
   [[1.000000, 0.000599], [0.990000, 0.002969], [0.980000, 0.005333],
    [0.970000, 0.007687], [0.960000, 0.010023], [0.940000, 0.014624],
    [0.920000, 0.019116], [0.900000, 0.023502], [0.880000, 0.027789],
	  [0.860000, 0.031974], [0.840000, 0.036054], [0.820000, 0.040024],
	  [0.800000, 0.043884], [0.780000, 0.047628], [0.760000, 0.051257],
	  [0.740000, 0.054767], [0.720000, 0.058160], [0.700000, 0.061433],
	  [0.680000, 0.064584], [0.660000, 0.067605], [0.640000, 0.070482],
	  [0.620000, 0.073206], [0.600000, 0.075763], [0.580000, 0.078145],
	  [0.560000, 0.080348], [0.540000, 0.082371], [0.520000, 0.084214],
	  [0.500000, 0.085877], [0.480000, 0.087357], [0.460000, 0.088643],
	  [0.440000, 0.089718], [0.420000, 0.090566], [0.400000, 0.091171],
	  [0.380000, 0.091521], [0.360000, 0.091627], [0.340000, 0.091508],
	  [0.320000, 0.091186], [0.300000, 0.090680], [0.280000, 0.090002],
	  [0.260000, 0.089084], [0.240000, 0.087831], [0.220000, 0.086143],
	  [0.200000, 0.083920], [0.180000, 0.081069], [0.160000, 0.077571],
	  [0.140000, 0.073436], [0.120000, 0.068620], [0.100000, 0.062998],
	  [0.080000, 0.056431], [0.060000, 0.048757], [0.050000, 0.044275],
		[0.040000, 0.039128], [0.030000, 0.033022], [0.020000, 0.025374],
		[0.012000, 0.017858], [0.008000, 0.013735], [0.004000, 0.008924],
		[0.002000, 0.005803], [0.001000, 0.003727], [0.000500, 0.002339],
		[0.000000, 0.000000], [0.000500,-0.004670], [0.001000,-0.005942],
		[0.002000,-0.007811], [0.004000,-0.010513], [0.008000,-0.014286],
		[0.012000,-0.016973], [0.020000,-0.020272], [0.030000,-0.022606],
		[0.040000,-0.024521], [0.050000,-0.026045], [0.060000,-0.027128],
		[0.080000,-0.028459], [0.100000,-0.029379], [0.120000,-0.029963],
		[0.140000,-0.030240], [0.160000,-0.030255], [0.180000,-0.030049],
		[0.200000,-0.029666], [0.220000,-0.029145], [0.240000,-0.028518],
		[0.260000,-0.027816], [0.280000,-0.027070], [0.300000,-0.026308],
		[0.320000,-0.025556], [0.340000,-0.024818], [0.360000,-0.024087],
		[0.380000,-0.023361], [0.400000,-0.022634], [0.420000,-0.021904],
		[0.440000,-0.021171], [0.460000,-0.020435], [0.480000,-0.019699],
		[0.500000,-0.018962], [0.520000,-0.018226], [0.540000,-0.017491],
		[0.560000,-0.016757], [0.580000,-0.016023], [0.600000,-0.015289],
		[0.620000,-0.014555], [0.640000,-0.013821], [0.660000,-0.013086],
		[0.680000,-0.012351], [0.700000,-0.011617], [0.720000,-0.010882],
		[0.740000,-0.010148], [0.760000,-0.009413], [0.780000,-0.008679], 
		[0.800000,-0.007944], [0.820000,-0.007210], [0.840000,-0.006475],
		[0.860000,-0.005741], [0.880000,-0.005006], [0.900000,-0.004272],
		[0.920000,-0.003537], [0.940000,-0.002803], [0.960000,-0.002068],
		[0.970000,-0.001701], [0.980000,-0.001334], [0.990000,-0.000967],
		[1.0, -0.000599]] );  /* <--------------  :(  --------------> */
}

module blade_wrapper() {
	translate([SHAFT_DIAMETER+1,0,0])
        blade();
}


module hub(){
	color("yellow")
	translate([0,0,0]) {
		difference(){
			cylinder(h=HUB_THICKNESS,r=HUB_DIAMETER); //hub
			translate([0,0,-HUB_THICKNESS/2]){ //hole
				cylinder(h=2*HUB_THICKNESS, d=SHAFT_DIAMETER);
            translate([0,0,HUB_THICKNESS/2-delta]) 
                blade_hub(false, Screw_440_thread, Blade_Hub_Diameter+0.5);
			}
		}
	}
}


module _prop(){ //DNU -- use prop() instead.
    difference() {
        union() {
            hub();
            for(i=[0:NUMBER_BLADES-1]){
                translate([0,0,HUB_THICKNESS/2]){
                    rotate([0,0,(360/NUMBER_BLADES)*i]){
                        translate([0,-BLADE_WIDTH/2,5]){
                            rotate([-PITCH_ANGLE, 0, 0]){
                                blade_wrapper();
                            }
                        }
                    }
                }
            }
        }
        translate([-HUB_DIAMETER+4,-2,HUB_THICKNESS+DELTA-1]){
            color("red"){
                linear_extrude(height=1)
                    text("CK  LK",size=4); 
            }
        }
        translate([-HUB_DIAMETER+10,-8,HUB_THICKNESS+DELTA-1]){
            color("red"){
                linear_extrude(height=1)
                    text("-5",size=4); 
            }
        }
    }
}


module prop(){
	translate([0,0,-HUB_THICKNESS/2]){
        difference() {
            intersection(){
                cylinder(h=HUB_THICKNESS*2,r=PROP_DIAMETER/2);
                _prop();
            }
            translate([0,0,HUB_THICKNESS/2-delta]) 
                blade_hub(false, Screw_440_thread, Blade_Hub_Diameter+0.5);
        }
	}
}

module DEP_blade() {
	color("yellow")
	translate([0,0,BLADE_THICKNESS/2]) rotate([0,90,0]) {
		cylinder(d=BLADE_THICKNESS, h=BLADE_LENGTH);
	}//
  difference() {
		echo(str("[Prop>blade] Fixing zero-width solid with DELTA=",DELTA,"..."));
		translate([DELTA,0,0]){
			cube([BLADE_LENGTH-2*DELTA, BLADE_WIDTH, BLADE_THICKNESS]);
		}
		rotate([atan(-BLADE_THICKNESS/BLADE_WIDTH),0,0]){
			translate([0,0,BLADE_THICKNESS]){
				cube([BLADE_LENGTH, BLADE_WIDTH, 2*BLADE_THICKNESS]);
			}
		}
	}
}
